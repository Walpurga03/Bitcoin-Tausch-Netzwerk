// Optimierter Nostr-Client f√ºr nostr-relay.online
import { StrategicNostrClient } from './strategicNostrClient';
import type { NostrEvent } from './types';

/**
 * Vorkonfigurierter Client f√ºr dein Bitcoin-Tausch-Netzwerk
 * Optimiert f√ºr nostr-relay.online + √∂ffentliche Relays
 */
class OptimizedBitcoinNostrClient extends StrategicNostrClient {
  constructor() {
    // Starte mit HYBRID-Strategie da du eigenes Relay hast
    super('HYBRID', true);
    console.log('üéØ Bitcoin-Nostr-Client initialisiert mit nostr-relay.online');
  }

  /**
   * Spezielle Methode f√ºr private Gruppenchats
   * Nutzt nur dein eigenes Relay f√ºr maximale Privatsph√§re
   */
  async publishPrivateGroupMessage(event: NostrEvent): Promise<void> {
    console.log('üîí Sende private Gruppennachricht nur √ºber nostr-relay.online');
    return this.publishEvent(event, 'PRIVATE_GROUPS');
  }

  /**
   * Spezielle Methode f√ºr Bitcoin-Angebote
   * Nutzt dein Relay + √∂ffentliche f√ºr maximale Reichweite
   */
  async publishBitcoinOffer(event: NostrEvent): Promise<void> {
    console.log('üí∞ Sende Bitcoin-Angebot √ºber alle verf√ºgbaren Relays');
    return this.publishEvent(event, 'BITCOIN_OFFERS');
  }

  /**
   * Spezielle Methode f√ºr anonyme Angebote
   * Bevorzugt √∂ffentliche Relays f√ºr bessere Anonymit√§t
   */
  async publishAnonymousOffer(event: NostrEvent): Promise<void> {
    console.log('üé≠ Sende anonymes Angebot bevorzugt √ºber √∂ffentliche Relays');
    return this.publishEvent(event, 'ANONYMOUS_OFFERS');
  }

  /**
   * √úberwacht die Gesundheit deines eigenen Relays
   */
  getOwnRelayHealth() {
    const status = this.getStatus();
    const ownRelay = status.relayDetails.find(r => r.url === 'wss://nostr-relay.online');
    
    return {
      url: 'wss://nostr-relay.online',
      connected: ownRelay?.connected || false,
      reconnectAttempts: ownRelay?.reconnectAttempts || 0,
      isHealthy: ownRelay?.connected && (ownRelay.reconnectAttempts < 3),
      recommendation: this.getRelayRecommendation(ownRelay)
    };
  }

  /**
   * Gibt Empfehlungen f√ºr Relay-Optimierung
   */
  private getRelayRecommendation(ownRelay: any) {
    if (!ownRelay?.connected) {
      return '‚ùå Dein Relay ist offline - pr√ºfe Server-Status';
    }
    
    if (ownRelay.reconnectAttempts > 2) {
      return '‚ö†Ô∏è H√§ufige Verbindungsabbr√ºche - pr√ºfe Netzwerk-Stabilit√§t';
    }
    
    return '‚úÖ Dein Relay l√§uft optimal';
  }

  /**
   * Intelligente Relay-Auswahl basierend auf Kontext
   */
  async smartPublish(event: NostrEvent, context: {
    isPrivate?: boolean;
    isAnonymous?: boolean;
    needsGlobalReach?: boolean;
  }): Promise<void> {
    
    if (context.isPrivate) {
      // Private Nachrichten nur √ºber dein Relay
      return this.publishPrivateGroupMessage(event);
    }
    
    if (context.isAnonymous) {
      // Anonyme Angebote bevorzugt √ºber √∂ffentliche Relays
      return this.publishAnonymousOffer(event);
    }
    
    if (context.needsGlobalReach) {
      // Bitcoin-Angebote √ºber alle Relays f√ºr maximale Reichweite
      return this.publishBitcoinOffer(event);
    }
    
    // Standard: Bitcoin-Angebote
    return this.publishBitcoinOffer(event);
  }

  /**
   * Fragt Events ab (delegiert an Basis-Client)
   */
  async queryEvents(filter: any): Promise<NostrEvent[]> {
    return super.queryEvents(filter);
  }

  /**
   * Detailliertes Monitoring f√ºr dein Setup
   */
  getDetailedStatus() {
    const baseStatus = this.getStatus();
    const ownRelayHealth = this.getOwnRelayHealth();
    
    return {
      ...baseStatus,
      ownRelay: ownRelayHealth,
      performance: {
        totalRelays: baseStatus.totalRelays,
        connectedRelays: baseStatus.connectedRelays,
        ownRelayConnected: ownRelayHealth.connected,
        publicRelaysConnected: baseStatus.relaysByType.public,
        redundancyLevel: this.calculateRedundancy(baseStatus)
      },
      recommendations: this.getOptimizationRecommendations(baseStatus, ownRelayHealth)
    };
  }

  /**
   * Berechnet Redundanz-Level
   */
  private calculateRedundancy(status: any): string {
    const connected = status.connectedRelays;
    
    if (connected >= 4) return 'üü¢ Hoch (Optimal)';
    if (connected >= 2) return 'üü° Mittel (Gut)';
    if (connected >= 1) return 'üü† Niedrig (Funktional)';
    return 'üî¥ Keine (Kritisch)';
  }

  /**
   * Gibt Optimierungsempfehlungen
   */
  private getOptimizationRecommendations(status: any, ownRelay: any): string[] {
    const recommendations = [];
    
    if (!ownRelay.connected) {
      recommendations.push('üîß Pr√ºfe deinen Relay-Server nostr-relay.online');
    }
    
    if (status.connectedRelays < 2) {
      recommendations.push('üì° F√ºge weitere Backup-Relays hinzu');
    }
    
    if (status.relaysByType.public === 0) {
      recommendations.push('üåê Verbinde zu √∂ffentlichen Relays f√ºr Reichweite');
    }
    
    if (ownRelay.reconnectAttempts > 2) {
      recommendations.push('‚ö° Optimiere Netzwerk-Verbindung zu deinem Relay');
    }
    
    if (recommendations.length === 0) {
      recommendations.push('‚úÖ Setup ist optimal konfiguriert');
    }
    
    return recommendations;
  }
}

// Singleton-Instanz optimiert f√ºr dein Setup
export const optimizedNostrClient = new OptimizedBitcoinNostrClient();

// Convenience-Funktionen f√ºr einfache Nutzung
export const bitcoinNostr = {
  // Verbindung aufbauen
  async connect() {
    await optimizedNostrClient.connect();
    const status = optimizedNostrClient.getDetailedStatus();
    console.log('üöÄ Bitcoin-Nostr-Client verbunden:', status.performance);
    return status;
  },

  // Private Gruppennachricht senden
  async sendGroupMessage(event: NostrEvent) {
    return optimizedNostrClient.publishPrivateGroupMessage(event);
  },

  // Bitcoin-Angebot ver√∂ffentlichen
  async publishOffer(event: NostrEvent, isAnonymous = false) {
    if (isAnonymous) {
      return optimizedNostrClient.publishAnonymousOffer(event);
    }
    return optimizedNostrClient.publishBitcoinOffer(event);
  },

  // Events abonnieren
  subscribe(filter: any, onEvent: (event: NostrEvent) => void, context = 'BITCOIN_OFFERS') {
    return optimizedNostrClient.subscribe(filter, onEvent, context as any);
  },

  // Events abfragen
  async queryEvents(filter: any, context = 'BITCOIN_OFFERS') {
    return optimizedNostrClient.queryEvents(filter);
  },

  // Status abrufen
  getStatus() {
    return optimizedNostrClient.getDetailedStatus();
  },

  // Relay-Gesundheit pr√ºfen
  checkHealth() {
    return optimizedNostrClient.getOwnRelayHealth();
  }
};